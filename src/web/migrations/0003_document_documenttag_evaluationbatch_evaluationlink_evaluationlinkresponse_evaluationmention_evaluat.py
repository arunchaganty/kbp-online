# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-04-21 22:06
from __future__ import unicode_literals

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import web.fields


class Migration(migrations.Migration):

    dependencies = [
        ('web', '0002_submission_submissionlink_submissionmention_submissionrelation_submissionscore'),
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('doc_date', models.DateField(blank=True, null=True)),
                ('doc_length', models.IntegerField(blank=True, null=True)),
                ('doc_digest', models.TextField(blank=True, null=True)),
                ('gloss', models.TextField(blank=True, null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'document',
            },
        ),
        migrations.CreateModel(
            name='EvaluationBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now=True)),
                ('batch_type', models.TextField()),
                ('params', models.TextField()),
                ('description', models.TextField()),
                ('corpus_tag', models.TextField()),
            ],
            options={
                'managed': False,
                'db_table': 'evaluation_batch',
            },
        ),
        migrations.CreateModel(
            name='EvaluationRelation',
            fields=[
                ('subject_id', web.fields.SpanField()),
                ('object_id', web.fields.SpanField()),
                ('created', models.DateTimeField(auto_now=True)),
                ('relation', models.TextField()),
                ('weight', models.FloatField(blank=True, null=True)),
                ('question_id', models.TextField(primary_key=True, serialize=False)),
                ('question_batch_id', models.IntegerField()),
            ],
            options={
                'db_table': 'evaluation_relation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MturkAssignment',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('hit_id', models.TextField()),
                ('created', models.DateTimeField(auto_now=True)),
                ('worker_id', models.TextField()),
                ('worker_time', models.IntegerField()),
                ('status', models.TextField()),
                ('response', models.TextField()),
                ('ignored', models.BooleanField()),
                ('comments', models.TextField(blank=True, null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'mturk_assignment',
            },
        ),
        migrations.CreateModel(
            name='MturkBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now=True)),
                ('params', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'mturk_batch',
            },
        ),
        migrations.CreateModel(
            name='Sentence',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('sentence_index', models.SmallIntegerField()),
                ('words', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
                ('lemmas', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
                ('pos_tags', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
                ('ner_tags', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
                ('doc_char_begin', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
                ('doc_char_end', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
                ('gloss', models.TextField()),
                ('dependencies', models.TextField()),
            ],
            options={
                'db_table': 'sentence',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SuggestedLink',
            fields=[
                ('id', web.fields.SpanField(primary_key=True, serialize=False)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('link_name', models.TextField()),
                ('confidence', models.FloatField(default=1.0)),
            ],
            options={
                'db_table': 'suggested_link',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SuggestedMention',
            fields=[
                ('id', web.fields.SpanField(primary_key=True, serialize=False)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('mention_type', models.TextField()),
                ('canonical_span', web.fields.SpanField()),
                ('gloss', models.TextField()),
            ],
            options={
                'db_table': 'suggested_mention',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DocumentTag',
            fields=[
                ('doc', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='web.Document')),
                ('tag', models.TextField()),
            ],
            options={
                'managed': False,
                'db_table': 'document_tag',
            },
        ),
        migrations.CreateModel(
            name='EvaluationLink',
            fields=[
                ('question_id', models.TextField()),
                ('doc', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='web.Document')),
                ('mention_id', web.fields.SpanField()),
                ('created', models.DateTimeField(auto_now=True)),
                ('link_name', models.TextField()),
                ('weight', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'evaluation_link',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EvaluationLinkResponse',
            fields=[
                ('question_id', models.TextField()),
                ('doc', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='web.Document')),
                ('mention_id', web.fields.SpanField()),
                ('created', models.DateTimeField(auto_now=True)),
                ('link_name', models.TextField()),
                ('weight', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'evaluation_link_response',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EvaluationMention',
            fields=[
                ('doc', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='web.Document')),
                ('mention_id', web.fields.SpanField()),
                ('created', models.DateTimeField(auto_now=True)),
                ('canonical_id', web.fields.SpanField()),
                ('mention_type', models.TextField()),
                ('gloss', models.TextField(blank=True, null=True)),
                ('weight', models.FloatField()),
                ('question_id', models.TextField(blank=True, null=True)),
                ('question_batch_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'evaluation_mention',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EvaluationMentionResponse',
            fields=[
                ('question_id', models.TextField()),
                ('doc', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='web.Document')),
                ('mention_id', web.fields.SpanField()),
                ('created', models.DateTimeField(auto_now=True)),
                ('canonical_id', web.fields.SpanField()),
                ('mention_type', models.TextField()),
                ('gloss', models.TextField(blank=True, null=True)),
                ('weight', models.FloatField()),
            ],
            options={
                'db_table': 'evaluation_mention_response',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EvaluationQuestion',
            fields=[
                ('id', models.TextField()),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='web.EvaluationBatch')),
                ('created', models.DateTimeField(auto_now=True)),
                ('params', models.TextField()),
            ],
            options={
                'db_table': 'evaluation_question',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EvaluationRelationResponse',
            fields=[
                ('question_id', models.TextField()),
                ('doc', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='web.Document')),
                ('subject_id', web.fields.SpanField()),
                ('object_id', web.fields.SpanField()),
                ('created', models.DateTimeField(auto_now=True)),
                ('relation', models.TextField()),
                ('weight', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'evaluation_relation_response',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MturkHit',
            fields=[
                ('id', models.TextField()),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='web.MturkBatch')),
                ('question_id', models.TextField()),
                ('created', models.DateTimeField(auto_now=True)),
                ('type_id', models.TextField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('units', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mturk_hit',
                'managed': False,
            },
        ),
    ]
